POSIX:可移植系统aip  Portable os
linux程序包管理:


科普:
    静态编译: 依赖的库会添加到程序源代码中
                libxxx.a
    共享模式编译:(动态编译)用到的时候在把代码加载到内存去(共享内存)
                    libxxx.so
    =======>ELF和EXE格式是不兼容的
           API:API（Application Programming Interface）是应用程序编程接口
           ABI:二进制可执行程序的格式    ABI（Application Binary Interface）为应用程序二进制接口
           库级别的虚拟化:   WINE  ---->靠这个就能在linux上使用win的程序
           windows和linux系统是不兼容的.
           但是我们可以使用库级别的虚拟化:
                   LINUX上:wne
                   WINDOWS上:cywin
    ------------------------------
   |-  应用级开发:面对应用程序接口
   |-              应用及开发需要依赖应用
   |-              java PHP python
   |-  系统级开发:面对系统api
   |-              c c++ 
   |-  操作系统开发:面对硬件接口
   |-              
    ------------------------------
    二进制应用程序的组成部分:
        二进制文件,库文件
        配置文件 /etc
        帮助文件 /usr/shareman



程序包管理器:
        debian:(先驱) 
                包格式名 deb
                包管理器 dpt
        redhat: 包格式名: rpm
                包管理器:  rpm (redhat package manager)
                        RPM is Package Manager
        Archlinux :
        Gentoo :
        ---------------------------------------------------
        源代码: name-版本号.tar.gz
                版本号:  主版本号.次版本号.发行号

        rpm包命名方式:
            name-版本号-包的发行号.rpm
                版本号:主版本.次版本号.发行号(和源代码保持一致)
                包的发行号: rpm包的发行号.os号.平台架构
                eg: bash-4.3.2-1.centos.i386.rpm
            
              常见的各种平台:
              X86:i386 i486 i586 i686
              x86_64:x64 x86_64 amd64
              powerpc: ppc(硬件平台)
              跟平台无关的:noarch(无平台)(这是因为这个包和平台压根无关,比如java )
        拆包:
            testapp-版本号-包的发行号.rpm:主包
            testapp-devel-版本号-包的发行号.rpm:分支包
            testapp-testing-版本号-包的发行号.rpm:分支包
            (分支包是珠宝的扩展,一定依赖于主包)
        包之间存在依赖关系:





   各种前端工具
        |- ------------------------------------------------------
        |-     yum :从本质上来讲,是rpm包管理的一个前端工具(补充和丰富了rpm的功能)
        |-     apt-get:deb包管理器的前端工具
        |-     zypper:suse上的rpm前端管理工具
        |-     dnf:Fedora 22+ rpm包管理器前端管理工具
        |- ------------------------------------------------------
   


   LDD命令:查看一个二进制程序锁依赖的各种库文件
                eg: ldd /bin/ls 
   
              
  管理查看本机已经装载的库文件:
        ldconfig 命令:    
                    -p:显示当前系统上已经缓存的所有的可以识别的可用库文件名称
                        及其文件路径映射空间
                    配置文件为 /etc/ld.so.conf
                                /etc/ld.so.conf/*.conf
                    缓存文件为; /etc/ld.so.cache
程序包管理:
        功能:将编译好的应用程序的各个组成文件打包成一个或几个程序包文件
              从而实现方便快捷的,安装升级卸载查询校验等操作

                
                1.程序包内有一个组成清单(每个包都独有):
                    (rpm包有一个专门的文件,专门用来列出当前程序包的文件清单)
                    文件清单:
                    安装或卸载时运行的脚本
                2.数据库(公共)(管理所有程序包的数据库)
                  程序包的名称及其版本
                  依赖关系
                  功能说明
                  安装生成的各个文件的文件路径记起你校验码信息
管理程序包的方式:
    使用包管理器: rpm deblian
    使用前端工具:yum dnf


    -------------
        获取程序包的途径:
              (1)系统发行版的光盘,或者官方的服务器:
                          CentOs镜像:
                          http://mirrors.aliyun.com
                          http://mirrors.sohu.com
                          http://mirrors.163.com
              (2)可以通过项目官方获取
              (3)第三方组织
                  Fedora-EPEL: (这个贼靠谱) (无脑相信) 
                  DAG
                  搜索引擎:
                      http://pkgs.org
                      http://rpmfind.net
                      http:rpm.pbone.net
              (4)自己制作:NB
       建议:
       一定要检查程序包的合法性:
            ====>检查来源合法性
            ====>程序包的完整性检查
            ====>
