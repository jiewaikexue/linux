vim编辑器
    文本编辑器种类：
        全屏编辑器：nano，vim，vi
        行编辑器：sed

    使用：
        vim:模式化的编辑器

        基本模式：
            编辑模式（命令模式）：
            输入模式（插入模式）：
            末行模式:
                内置的命令行接口

    打开文件：
        # vim 选项 文件 文件
        1. vim +# 文件：打开文件后，直接让光标处于第#行的行首
        2. vim +/PATTER 文件：打开文件后，，直接让光标处于第一个被PATTER匹配到的行的行首
        3. vim + 文件：最后一行行首
    模式转换：
        编辑模式--->输入模式
        i:insert ,在光标所在处插入
        I:在当前光标所在行的 行首输入
        a:append，在光标所在处的后面插入
        A:在当前光标所在行的，行尾输入
        o:在当前光标所在行的下方，打开一个新行
        O:在当前光标所在行的上方，打开一个新行
        c:
        C:
        总结：
            i----a（前后）
            O----o（上下）
            I----A（首尾）
    输入模式---->编辑模式 ESc
    编辑模式---->末行模式 ：
    末行模式---->编辑模式 ESc Esc

    关闭文件：
        ：q   退出
        ：q！ 强制退出
        ：wq  保存退出
        ：x   保存退出
        ：w /某个文件   把当前文本全部保存到另一个文件中去

        ZZ（命令模式）
=======================================================
    光标跳转：
        字符间跳转：
           hjkl 
        单词间跳转
            w：下一个单词的词首
            b:  当前或前一个单词的词首
            e：当前或下一个单词的词尾
        行首行尾跳转：
            ^:跳转至行首的第一个非空白字符
            0：跳转至绝对行首
            $:跳转至绝对行尾
        行间移动：
            #G或者#gg：跳转至#指定的行
            G:直接回到最后一行
            gg或者1G：
        句间移动
            ）：跳转至前一个句子
            （：跳转至下一个句子
        段落间移动
            }：跳转到下一段罗
            {：跳转至前一个段落

vim的编辑命令
    字符编辑：
        x：删除光标注的单个字符
        #x：删除光标处起始的#个字符 
        xp：交换贯标所在处的字符及其后字符两个的
   替换命令：
        #rx：替换光标所在处的字符替换为x字符
   删除命令
        d:删除命令，可以结合光标跳转字符，实现范围删除
            
            d$: 
            d^:
            d0:
            #dw:
            #de:
            #db:
            #dd:删除光标所在的行
    粘贴命令：
        p：缓冲区中存储的，如果是整行内容====》粘贴至当前光标所在行的下方
                否则，====>粘在后面
            =======>一切取决于缓冲区里面是不是一整行
        P：一切取决于缓冲区当中存储的是整行，还是部分
            ====>整行，粘贴到上一行
            ====》非整行，粘贴到前面
    复制命令：
        y：复制，和d相似
            y$: 
            y^:
            y0:
            #yw:
            #ye:
            #yb:
            #yy:copy光标所在的行
    其他编辑操作：
     ||   可视化模式：
     ||      v:按照字符选定（划过的字符有多少，就选定多少）
     ||      V：行选定（整行整行的选定）
     ||      Ctrl +v：注释用的
     ||      Note：经常结合编辑命令 d c y=====>直接对选定的区域进行操作
     ||   撤销此前的操作：
     ||       u：撤销此前的操作
     ||   恢复此前的撤销：
     ||       Ctrl+r：相当于反撤销
     ||   重复前一个编辑操作
     ||       .号
     翻屏操作：
        ctrl+f：向文件尾部翻一屏
                ctrl+b：向文件尾部翻半屏
        ctrl+d：向文件首部翻一屏
                ctrl+u：向文件首部翻半屏

    vimtutor :vim自带的内置教程：

    vim的末行模式
        内建的命令行接口
        （1）地址定界机制：
            绝对地址定界：
                     ：start_pos,end_pos
                    例如：:1,3   第1行到底3行
                     ：pos
                     例如： ：100   第100行
            相对地址定界：
                :#,+#  从左侧#表示的行起始，加上右侧#表示的行数：
                :#,-#
            特殊地址定界
                .号 表示当前行
                $ 表示最后一行
                %号表示全文
            模式匹配地址定界
                 ：/pat1/，/pat2/：表示从第一次被pat1 匹配到的行
                                 到第一次被/pat2/匹配到的行结束 
                 ：#，/pat1/
                 :/pat/,$
        常见使用方式
            定界之后紧跟一个编辑命令
                :#,#d 
                :#,#y
                :#,#w（保存） /文件  ：将范围内的行另存到一个文件中
                :#r /文件 ：读取某个文件插入到第#
        (2)查找：
            /PATTER： 搜索全文，从当前光标所在处，想文件尾部查找
                    和grep那套模式匹配一样
            ?PATTER：搜索全文，从当前光标处，向文件首部查找
                    n：与命令同方向
                    N：与命令反方向
        (3)查找并替换
            s:在末行模式下完成查找替换操作
               | s/要查找的内容/要替换的内容/修饰符
               | --->要查找的内容，可以用PATTER
               | --->替换为的内容，可以用\1,\2...等后向引用。
               |      
                ---->还可以用&引用前面查找到的整个内容
               | 修饰符：
               |     i：忽略大小写
               |     g：全局替换，
               |         不带g的话默认情况下，每一行只替换第一次出现的
               |------------------------------------------------------
            配合地址定界使用：
            eg:
                :.,$s/r\(..\)t/\1/g
                :%s/linux/&er/g
            查找替换中的分隔符 /  可以替换为其他字符，例如
