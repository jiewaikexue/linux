
Linux文件系统上的特殊权限
        SUID SGID Sticky
    回顾：
(2)安全上下文法则
    前提：
              进程：有属主 属组  是进程的发起者
              文件：有属主 数组
    （1）任何一个可执行程序文件，能不能启动为进程，取决于发起者对程序文件是否拥有执行权限
    （2）启动为进程之后的程序，进程的属主为进程的发起者
        进程的属组为进程的发起者所属的组
    （3）继承访问文件时的权限，取决于进程的发起者
        a：进程的发起者 ==文件的属主 则使用文件的属主权限
        b：进程的发起者，属于文件的属组  则使用文件的属组权限
        c：以上都不成立时，使用文件的其它权限。
	
	
	总结：谁启动程序，程序就和谁走（哪怕启动者不是程序员文件的属主 属组）
		（大树好乘凉，有钱就是爹）
(3)SUID:
    （1）任何一个可执行程序文件，能不能启动为进程，取决于发起者对程序文件是否拥有执行权限

    （2）启动为进程之后的程序，进程的属主为原来程序文件的属主:
         。。。。。。权限改变。。。。。
	总结：源文件的主子是谁，进程的主子就是水
        
        chmod u+s xxx
        chmod u-s xxx
**|**|
删除目录下的文件，需要考虑用户本身对于该目录有没有可写权限
**|**|
(4)SGID:和suid完全是两回事
        （1）默认情况下：用户创建文件时，其属组为此用户所属的基本组。
            一旦某目录被设定了sgid，则对此目录有写权限的用户
            在目录下创建的文件的属组，都是该目录的组

        chmod g+s xxx
        chmod g-s xxx
(5)Sticky: 粘滞位  /tmp /var/tmp
        
        对于一个多人可写的目录，如果设置了Sticky，则每个用户仅仅只能删除自己的文件
        只能删除自己的，根据属主匹配1
        chmod o+t DIR...
        chmod o-t DIR...
        
    组合： SUID SGID Sticky
            s    s     t
            0    0     0
            --------------
        映射 1    1    1 ====>
            chmod 1777 /tmp/a.txt
            ====>八进制最高位，表示特殊的三个权限
            umask 掩码 也是4位 0022 特主组它
        几个权限位分别映射
            SUID：user,占据user的执行权限位
                    s：表示原属主有x
                    S：属主原来没有x
            SGID：group,占据group的执行权限位
                    s：表示原属主有x
                    S：属主原来没有x
            Sticky：other,占据other的执行权限位
                   t：表示原属主有x
                   T：属主原来没有x
        
        特殊权限条件检测 
       test     -u：
                -g：
                -k；
bash脚本编程
        戳城市编程语言：顺序执行 选择执行 循环执行
        
    if 判断条件；then
        条件为真的分支代码
    fi

    if 1
    then
        code
    else 
        code
    fi

    
